card(1,"CLUBS", 1).           %fiori
card(2, "DIAMONDS", 1).
card(3, "HEARTS", 1). 
card(4, "SPADES" , 1).      %picche  
           
card(5, "CLUBS", 2).
card(6, "DIAMONDS", 2).
card(7, "HEARTS", 2).
card(8, "SPADES" , 2).

card(9, "CLUBS", 3).
card(10, "DIAMONDS", 3).
card(11, "HEARTS", 3).
card(12, "SPADES" , 3).

card(13, "CLUBS", 4).
card(14, "DIAMONDS", 4).
card(15, "HEARTS", 4).
card(16, "SPADES" , 4).

card(17, "CLUBS", 5).
card(18, "DIAMONDS", 5).
card(19, "HEARTS", 5).
card(20, "SPADES" , 5).

card(21, "CLUBS", 6).
card(22, "DIAMONDS", 6).
card(23, "HEARTS", 6).
card(24, "SPADES" , 6).

card(25, "CLUBS", 7).
card(26, "DIAMONDS", 7).
card(27, "HEARTS", 7).
card(28, "SPADES" , 7).

card(29, "CLUBS", 8).
card(30, "DIAMONDS", 8).
card(31, "HEARTS", 8).
card(32, "SPADES" , 8).

card(33, "CLUBS", 9).
card(34, "DIAMONDS", 9).
card(35, "HEARTS", 9).
card(36, "SPADES" , 9).

card(37, "CLUBS", 10).
card(38, "DIAMONDS", 10).
card(39, "HEARTS", 10).
card(40, "SPADES" , 10).

card(41, "CLUBS", 11).  %j
card(42, "DIAMONDS", 11).
card(43, "HEARTS", 11).
card(44, "SPADES" , 11).

card(45, "CLUBS", 12).
card(46, "DIAMONDS", 12).
card(47, "HEARTS", 12).
card(48, "SPADES" , 12).

card(49, "CLUBS", 13).
card(50, "DIAMONDS", 13).
card(51, "HEARTS", 13).
card(52, "SPADES" , 13).


moveToCe(C,X) | noToCe(C,X):-spostabileInCe(C),cell(C1,X),C1=53.
moveToFi(C,F) | noToFi(C,F):-spostabileInF(C,F).
moveToCo(Car,Col)|noToCo(Car,Col):-spostabileInCo(Car,Col).
moveFromeCeToColumn(Cell,Column)|no(Cell,Column):-spostabileDaCellaAColonna(Cell,Column).
moveFromeCeToFinish(Card,Finish)|noMo(Card,Finish):-spostabileDaCellaAFinish(Card,Finish).

spostabile(C):-spostabileInCe(C).
spostabile(C):-spostabileInF(C,F).

%regole non scritte
mossa(C,X):-moveToCe(C,X).
mossa(C,F):-moveToFi(C,F).
mossa(C,F):-moveToCo(C,F).
mossa(C,F):-moveFromeCeToColumn(C,F).
mossa(C,F):-moveFromeCeToFinish(C,F).

cartaMossa(C):-moveToCe(C,X).
cartaMossa(C):-moveToFi(C,F).
cartaMossa(C):-moveToCo(C,F).
cartaMossa(C):-moveFromeCeToColumn(C,F).
cartaMossa(C):-moveFromeCeToFinish(C,F).

%devo fare esattamnete una sola mossa 
:-#count{C,X:mossa(C,X)}<1.
:-#count{C,X:mossa(C,X)}>1.



%se posso mettere una carta nelle finish devo metterla 
:-spostabileInF(C,F),moveToCe(C1,X).
:-spostabileInF(C,F),moveToCo(Car,Col).
:-spostabileInF(C,F),moveFromeCeToColumn(Cell,Column).
:-spostabileDaCellaAFinish(F,C),moveFromeCeToColumn(Col,C1).
:-spostabileDaCellaAFinish(F,C),moveToCe(C1,X).
:-spostabileDaCellaAFinish(F,C),moveToCo(C1,X).

scala(C):-card(C,S,V),card(C1,S1,V1),colore(C,Colore),colore(C1,Colore1),Colore!=Colore1,column(C,P,Col),column(C1,P1,Col),P=P1+1,V=V1-1.
colore(C,"ROSSO"):-card(C,"DIAMONDS",V).
colore(C,"ROSSO"):-card(C,"HEARTS",V).
colore(C,"NERO"):-card(C,"SPADES",V).
colore(C,"NERO"):-card(C,"CLUBS",V).

colonnaNonVuota(C):-column(Card,Pos,C).	
colonna(0). colonna(1). colonna(2). colonna(3). colonna(4). colonna(5). colonna(6). colonna(7). 

							%11
%per prima cosa faccio tutti gli spostamenti all'interno delle colonne, senza ovviamente dividere scale già formate e senza considerare una colonna vuota					
:~spostabileInCo(Car,Col),not scala(Car),noToCo(Car,Col). [1:11]

%a parità scelgo quelle che spostano istantaneamente una carta da mettere in finish (spostando la carta in colonna)
prossimaCarta(C):-card(C,S,1).
colonnaConProssimaIstantanea(Col):-spostabile(Spostabile),column(Spostabile,P,Col),column(C,P1,Col),prossimaCarta(C),P1=P-1.
:~column(Card,P,Column),colonnaConProssimaIstantanea(Column), noToCo(Card,Col). [1:11]

%vedo poi se ci sono spostamenti che libera in una sola mossa una carta da mettere nelle finish  (spostando la carta in cella)
:~column(Card,P,Column),column(Ca,P1,Column),card(Ca,S,1),colonnaConProssimaIstantanea(Column), noToCe(Card,Cel). [1:11]


%se posso togliere una carta dalle celle vuote, devo cercare di farlo 
:~spostabileDaCellaAColonna(Cell,Column),no(Cell,Column). [2:11]


							%10

%dal momento in cui decido di spostare in colonna devo preferire gli spostamanti che liberano assi
colonnaConAssi(C,P):-column(Card,P,C),card(Card,S,1).      
:~column(Card,P,Column),colonnaConAssi(Column,Position), moveToCo(Card,Col),Differenza=P-Position,Costo=7-Differenza. [Costo:10]


									%livello 9 ho esaurito le mosse in colonna, devo spostare in cella per forza
									
%vedo poi se ci sono spostamenti che libera in una sola mossa una carta da mettere nelle finish
:~column(Card,P,Column),colonnaConProssimaIstantanea(Column), noToCe(Card,Cel). [1:9]
										
										%liv 8
%preferisco spostare una carta che libera una colonna 
:~spostabileInCe(C),column(C,0,Colonna), noToCe(C,Ce). [2:8]

%a parità preferisco spostamneti in cella di carte che liberano spostabili
:~prossimaInScala(Card),column(Card,P,Column),spostabileInCe(C),column(C,P1,Column),P1=P+1,noToCe(C,Cell). [1:8]


%se ho un k solo in una colonna devo aggiungere carte li perchè così inizio a sbloccare altre colonne senza intaccare altro
:~colonnaconSoloUnK(C), spostabileInCo(Car,C),not moveToCo(Car,C). [1:11]
colonnaconSoloUnK(C):-column(Card,0,C),card(Card,S,13),#count{Ca:column(Ca,P,C)}=1.
								%liv 7

% dal momento in cui decido di spostare nelle celle vuote devo preferire gli spostamenti che liberano assi
:~spostabileInCe(Card),column(Card,P,Column),colonnaConAssi(Column,Position),Differenza=P-Position,Costo=7-Differenza. [Costo:7]	
							
								%liv 6
%dal momento in cui decido di spostare in colonna devo preferire spostamenti che liberano carte da mettere in finish
prossimaCarta(C):-finishedCell(Card,S,F),card(Card,S,V),card(C,S,V1),V1=V+1.
colonnaConProssima(Col,P):-column(C,P,Col),prossimaCarta(C).
:~column(Card,P,Column),colonnaConProssima(Column,Position), noToCo(Card,Col),Differenza=P-Position,Costo=7-Differenza. [Costo:6]
%dal momento in cui decido di spostare in cella devo preferire spostamenti che liberano carte da mettere in finish
:~column(Card,P,Column),colonnaConProssima(Column,Position), noToCe(Card,Cel),Differenza=P-Position,Costo=7-Differenza. [Costo:6]

% dal momento in cui decido di spostare nelle celle vuote devo preferire gli spostamenti che liberano assi
:~column(Card,P,Column),colonnaConAssi(Column,Position), moveToCe(Card,Cell),Differenza=P-Position,Costo=7-Differenza. [Costo:6]
				

								%liv5

%limito la separazione di scale già formate
:~scala(C),moveToCo(C,Column). [1:5]
:~scala(C),moveToCe(C,Column). [1:5]


							
%non devo mettere nelle finish cell tutte carte dello stesso colore
:~ #count{Card:cell(Card,Cell),colore(Card,"ROSSO")}>=2, moveToCe(C,X),colore(C,"ROSSO"). [1:5]
:~ #count{Card:cell(Card,Cell),colore(Card,"NERO")}>=2,moveToCe(C,X),colore(C,"NERO"). [1:5]		
							


										%livello 4


% bisogna evitare il più possibile di occupare celle vuote
:~moveToCe(C,X). [1:4]



%preferisco togliere carte da colonne con meno carte
carteNellaColonna(C,N):-column(Ca,P,C),#count{Card:column(Card,P1,C)}=N.
menoCarte(Nu):-#min{N:carteNellaColonna(C,N)}=Nu.
colonnaConMenoCarte(C):-carteNellaColonna(C,N),menoCarte(N).

											%livello 2


%preferisco spostamenti  da colonne con meno carte
:~moveToCe(C,F),column(C,P,Col),not colonnaConMenoCarte(Col). [1:2]


%se una carta fa parte di una scala non la voglio spostare
:~moveToCo(C,F), scala(C). [1:2]
:~moveToCe(C,F), scala(C). [1:2]










